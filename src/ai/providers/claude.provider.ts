import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import Anthropic from '@anthropic-ai/sdk';
import { AIProvider, AIResponse, ChatOptions } from '../ai.interface';

@Injectable()
export class ClaudeProvider implements AIProvider {
  private anthropic: Anthropic;
  private modelName = 'claude-3-sonnet';
  private providerName = 'Anthropic';

  constructor(private configService: ConfigService) {
    this.anthropic = new Anthropic({
      apiKey: this.configService.get<string>('ai.anthropic.apiKey'),
    });
  }

  async chat(message: string, options?: ChatOptions): Promise<AIResponse> {
    // üèóÔ∏è Claude API Î©îÏãúÏßÄ Íµ¨Ï°∞ Íµ¨ÏÑ±
    const messages: any[] = [];

    // ÎåÄÌôî ÌûàÏä§ÌÜ†Î¶¨ Ï∂îÍ∞Ä - Îß•ÎùΩ Ïú†ÏßÄÎ•º ÏúÑÌï¥ ÌïÑÏöî
    if (
      options?.conversationHistory &&
      options.conversationHistory.length > 0
    ) {
      // ClaudeÎäî ÏãúÏä§ÌÖú Î©îÏãúÏßÄÎ•º Î≥ÑÎèÑ ÌååÎùºÎØ∏ÌÑ∞Î°ú Ï≤òÎ¶¨ÌïòÎØÄÎ°ú user/assistantÎßå Ï∂îÍ∞Ä
      const chatMessages = options.conversationHistory
        .filter((msg) => msg.role === 'user' || msg.role === 'assistant')
        .filter((msg) => msg.content && msg.content.trim().length > 0); // Îπà Î©îÏãúÏßÄ ÌïÑÌÑ∞ÎßÅ
      messages.push(...chatMessages);
    }

    // ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê ÏßàÎ¨∏ Ï∂îÍ∞Ä
    messages.push({ role: 'user', content: message });

    // üéØ MCP ÎèÑÍµ¨ ÏÑ§Ï†ï (JarvisÏóêÏÑú Ï†ÑÎã¨Î∞õÏùå)
    // options.toolsÍ∞Ä ÏûàÏúºÎ©¥ Claude Tools ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ ÏàúÏàò ÌÖçÏä§Ìä∏ ÏùëÎãµ
    const apiParams: any = {
      model: 'claude-3-7-sonnet-20250219',
      max_tokens: options?.maxTokens || 2000,
      messages,
      system: options?.systemMessage,
    };

    // JarvisÏóêÏÑú ÎèÑÍµ¨ Î™©Î°ùÏùÑ Ï†ÑÎã¨Ìïú Í≤ΩÏö∞ÏóêÎßå Tools ÌôúÏÑ±Ìôî
    if (options?.tools && options.tools.length > 0) {
      apiParams.tools = options.tools;
      console.log(
        'üîß Claude Tools enabled with',
        options.tools.length,
        'tools',
      );
    }

    console.log('üí¨ Sending', messages.length, 'messages to Claude');

    // üöÄ ÏàúÏàòÌïú Claude API Ìò∏Ï∂ú - MCP Î°úÏßÅ ÏóÜÏù¥ Îã®ÏàúÌïú ÎûòÌçº Ïó≠Ìï†
    const response = await this.anthropic.messages.create(apiParams);

    // üìä ÏùëÎãµ Î∂ÑÏÑù Î°úÍπÖ
    console.log('ü§ñ Claude Response Analysis:');
    console.log('  - Content blocks:', response.content.length);

    // üîç Claude ÏùëÎãµ Íµ¨Ï°∞ Ìï¥ÏÑù
    // response.content: Î∞∞Ïó¥Î°ú Íµ¨ÏÑ±Îêú ÏùëÎãµ Î∏îÎ°ùÎì§
    // - type: 'text' (ÌÖçÏä§Ìä∏ ÏùëÎãµ) | 'tool_use' (ÎèÑÍµ¨ ÏÇ¨Ïö©)
    // - Ïó¨Îü¨ Î∏îÎ°ùÏù¥ ÏûàÏùÑ Ïàò ÏûàÏùå (ÌÖçÏä§Ìä∏ + ÎèÑÍµ¨ Ï°∞Ìï© Í∞ÄÎä•)

    let textResponse = '';
    const rawToolCalls = [];

    // ÏùëÎãµ Î∏îÎ°ùÎì§ÏùÑ ÏàúÌöåÌïòÎ©∞ ÌÖçÏä§Ìä∏ÏôÄ ÎèÑÍµ¨ Ìò∏Ï∂ú Î∂ÑÎ¶¨
    for (const content of response.content) {
      if (content.type === 'text') {
        textResponse += content.text;
        console.log('  - Text block found:', content.text.length, 'chars');
      } else if (content.type === 'tool_use') {
        rawToolCalls.push(content);
        console.log('  - Tool use found:', content.name);
      }
    }

    // üîÑ ÎèÑÍµ¨ Ìò∏Ï∂ú Ï†ïÎ≥¥Î•º ÌëúÏ§Ä ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
    // ProviderÎäî ÎèÑÍµ¨Î•º Ïã§ÌñâÌïòÏßÄ ÏïäÍ≥†, Ï†ïÎ≥¥Îßå JarvisÏóêÍ≤å Ï†ÑÎã¨
    const toolCalls = rawToolCalls.map((tc) => ({
      name: tc.name,
      parameters: tc.input, // ClaudeÎäî input ÌïÑÎìú ÏÇ¨Ïö©
    }));

    if (toolCalls.length > 0) {
      console.log(
        'üì§ Returning tool calls to Jarvis:',
        toolCalls.map((tc) => tc.name),
      );
    }

    // ‚ú® ProviderÏùò ÌïµÏã¨ Ïó≠Ìï†: ÏàúÏàòÌïú API ÏùëÎãµÏùÑ JarvisÏóêÍ≤å Ï†ÑÎã¨
    // - ÎèÑÍµ¨ Ïã§ÌñâÏùÄ JarvisÍ∞Ä Îã¥Îãπ
    // - Follow-up Î°úÏßÅÎèÑ JarvisÍ∞Ä Îã¥Îãπ
    // - ProviderÎäî Îã®ÏàúÌïú API ÎûòÌçº Ïó≠Ìï†Ïóê ÏßëÏ§ë

    // üéØ ÌëúÏ§ÄÌôîÎêú AIResponse Î∞òÌôò - JarvisÍ∞Ä Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖòÌï† Ïàò ÏûàÎèÑÎ°ù
    return {
      raw: response, // ÏõêÎ≥∏ Claude ÏùëÎãµ (ÎîîÎ≤ÑÍπÖÏö©)
      response: textResponse, // AIÏùò ÌÖçÏä§Ìä∏ ÏùëÎãµ (Îπà Î¨∏ÏûêÏó¥ Í∞ÄÎä•)
      provider: this.modelName, // ÏÇ¨Ïö©Îêú Î™®Îç∏Î™Ö
      toolCalls: toolCalls.length > 0 ? toolCalls : undefined, // ÎèÑÍµ¨ Ìò∏Ï∂ú Ï†ïÎ≥¥
    };
  }

  getModelName(): string {
    return this.modelName;
  }

  getProviderName(): string {
    return this.providerName;
  }
}
