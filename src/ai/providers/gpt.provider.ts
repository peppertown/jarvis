import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import OpenAI from 'openai';
import { AIProvider, AIResponse, ChatOptions } from '../ai.interface';

@Injectable()
export class GptProvider implements AIProvider {
  private openai: OpenAI;
  private modelName = 'gpt-5-mini';
  private providerName = 'OpenAI';

  constructor(private configService: ConfigService) {
    this.openai = new OpenAI({
      apiKey: this.configService.get<string>('ai.openai.apiKey'),
    });
  }

  async chat(message: string, options?: ChatOptions): Promise<AIResponse> {
    // üèóÔ∏è OpenAI API Î©îÏãúÏßÄ Íµ¨Ï°∞ Íµ¨ÏÑ±
    const messages: any[] = [];

    // ÏãúÏä§ÌÖú Î©îÏãúÏßÄ Ï∂îÍ∞Ä (AI Ïó≠Ìï† Î∞è ÏßÄÏπ®)
    if (options?.systemMessage) {
      messages.push({ role: 'system', content: options.systemMessage });
    }

    // ÎåÄÌôî ÌûàÏä§ÌÜ†Î¶¨ Ï∂îÍ∞Ä - Îß•ÎùΩ Ïú†ÏßÄÎ•º ÏúÑÌï¥ ÌïÑÏöî
    if (
      options?.conversationHistory &&
      options.conversationHistory.length > 0
    ) {
      // ÏãúÏä§ÌÖú Î©îÏãúÏßÄ Ïù¥ÌõÑÏóêÎäî user/assistant Î©îÏãúÏßÄÎßå Ï∂îÍ∞Ä
      const chatMessages = options.conversationHistory.filter(
        (msg) => msg.role === 'user' || msg.role === 'assistant',
      );
      messages.push(...chatMessages);
    }

    // ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê ÏßàÎ¨∏ Ï∂îÍ∞Ä
    messages.push({ role: 'user', content: message });

    // üéØ MCP ÎèÑÍµ¨ ÏÑ§Ï†ï (JarvisÏóêÏÑú Ï†ÑÎã¨Î∞õÏùå)
    // options.toolsÍ∞Ä ÏûàÏúºÎ©¥ Function Calling ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ ÏàúÏàò ÌÖçÏä§Ìä∏ ÏùëÎãµ
    const apiParams: any = {
      model: options?.model || this.modelName,
      messages,
      max_completion_tokens: options?.maxTokens || 2000,
      temperature: 1,
    };

    // JarvisÏóêÏÑú ÎèÑÍµ¨ Î™©Î°ùÏùÑ Ï†ÑÎã¨Ìïú Í≤ΩÏö∞ÏóêÎßå Function Calling ÌôúÏÑ±Ìôî
    if (options?.tools && options.tools.length > 0) {
      apiParams.tools = options.tools;
      apiParams.tool_choice = 'auto';
      console.log(
        'üîß Function Calling enabled with',
        options.tools.length,
        'tools',
      );
    }

    console.log('üí¨ Sending', messages.length, 'messages to OpenAI');

    // üöÄ ÏàúÏàòÌïú OpenAI API Ìò∏Ï∂ú - MCP Î°úÏßÅ ÏóÜÏù¥ Îã®ÏàúÌïú ÎûòÌçº Ïó≠Ìï†
    const response = await this.openai.chat.completions.create(apiParams);

    const choice = response.choices[0];

    // üìä ÏùëÎãµ Î∂ÑÏÑù Î°úÍπÖ
    console.log('ü§ñ OpenAI Response Analysis:');
    console.log('  - Finish reason:', choice.finish_reason);
    console.log('  - Has content:', choice.message.content ? 'Yes' : 'No');
    console.log(
      '  - Tool calls count:',
      choice.message.tool_calls?.length || 0,
    );

    // üîç OpenAI ÏùëÎãµ Íµ¨Ï°∞ Ìï¥ÏÑù
    // choice.message.content: AIÏùò ÌÖçÏä§Ìä∏ ÏùëÎãµ (ÎèÑÍµ¨Îßå Ìò∏Ï∂ú Ïãú null Í∞ÄÎä•)
    // choice.message.tool_calls: AIÍ∞Ä Ìò∏Ï∂úÌïòÎ†§Îäî ÎèÑÍµ¨Îì§Ïùò Î∞∞Ïó¥
    // finish_reason: 'stop'(ÏôÑÎ£å) | 'tool_calls'(ÎèÑÍµ¨ Ìò∏Ï∂ú ÌïÑÏöî) | 'length'(ÌÜ†ÌÅ∞ ÌïúÍ≥Ñ)

    const textResponse = choice.message.content || '';
    const rawToolCalls = choice.message.tool_calls || [];

    // üîÑ ÎèÑÍµ¨ Ìò∏Ï∂ú Ï†ïÎ≥¥Î•º ÌëúÏ§Ä ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
    // ProviderÎäî ÎèÑÍµ¨Î•º Ïã§ÌñâÌïòÏßÄ ÏïäÍ≥†, Ï†ïÎ≥¥Îßå JarvisÏóêÍ≤å Ï†ÑÎã¨
    const toolCalls = rawToolCalls
      .filter((tc) => tc.type === 'function')
      .map((tc) => {
        try {
          return {
            name: tc.function.name,
            parameters: JSON.parse(tc.function.arguments),
          };
        } catch (error) {
          console.error(
            '‚ùå Failed to parse tool arguments:',
            error,
            tc.function.arguments,
          );
          return null;
        }
      })
      .filter(Boolean); // null Í∞í Ï†úÍ±∞

    if (toolCalls.length > 0) {
      console.log(
        'üì§ Returning tool calls to Jarvis:',
        toolCalls.map((tc) => tc.name),
      );
    }

    // ‚ú® ProviderÏùò ÌïµÏã¨ Ïó≠Ìï†: ÏàúÏàòÌïú API ÏùëÎãµÏùÑ JarvisÏóêÍ≤å Ï†ÑÎã¨
    // - ÎèÑÍµ¨ Ïã§ÌñâÏùÄ JarvisÍ∞Ä Îã¥Îãπ
    // - Follow-up Î°úÏßÅÎèÑ JarvisÍ∞Ä Îã¥Îãπ
    // - ProviderÎäî Îã®ÏàúÌïú API ÎûòÌçº Ïó≠Ìï†Ïóê ÏßëÏ§ë

    // üéØ ÌëúÏ§ÄÌôîÎêú AIResponse Î∞òÌôò - JarvisÍ∞Ä Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖòÌï† Ïàò ÏûàÎèÑÎ°ù
    return {
      raw: response, // ÏõêÎ≥∏ OpenAI ÏùëÎãµ (ÎîîÎ≤ÑÍπÖÏö©)
      response: textResponse, // AIÏùò ÌÖçÏä§Ìä∏ ÏùëÎãµ (Îπà Î¨∏ÏûêÏó¥ Í∞ÄÎä•)
      provider: this.modelName, // ÏÇ¨Ïö©Îêú Î™®Îç∏Î™Ö
      toolCalls: toolCalls.length > 0 ? toolCalls : undefined, // ÎèÑÍµ¨ Ìò∏Ï∂ú Ï†ïÎ≥¥
    };
  }

  getModelName(): string {
    return this.modelName;
  }

  getProviderName(): string {
    return this.providerName;
  }
}
